class Solution{
public:

    int t[501][501];
    bool isPalindrome(string &s, int i, int j){
        while(i<=j){
        if(s[i]!=s[j]) 
        return false;
        i++,j--;
            
        }
        return true;
    }
    int solve(string &s, int i, int j){
        if(i >= j){
            return 0;
        }
        int left, right;
        if(isPalindrome(s, i, j)){
            return  0;
        }
        if(t[i][j] != -1){
            return t[i][j];
        }
        int ans = INT_MAX;
        for(int k=i;k<j;k++){
            // int temp = solve(s, i, k) + solve(s, k+1, j) + 1;
            
            if(t[i][k] != -1){
                left = t[i][k];
            }
            else{
                left = solve(s, i, k);
            }
            if(t[k+1][j] != -1){
                right = t[k+1][j];
            }
            else{
                right = solve(s, k+1, j);
            }
            int temp = left + right + 1;
            ans = min(ans, temp);
        }
        
        return t[i][j] = ans;
       
        
    }

    int palindromicPartition(string str)
    {
        // code here
        // memset(t, -1, sizeof(t));
        // int ans = solve(str, 0, str.length()-1);
        // return ans;
        memset(t,-1,sizeof(t));
        int i = 0, j = str.size()-1;
        return solve(str,i,j);
    }
};

/*
 * Complete the 'longestCommonSubsequence' function below.
 *
 * The function is expected to return an INTEGER_ARRAY.
 * The function accepts following parameters:
 *  1. INTEGER_ARRAY a
 *  2. INTEGER_ARRAY b
 */

vector<int> longestCommonSubsequence(vector<int> a, vector<int> b) {
    int t[a.size()+1][b.size()+1];
    int m = a.size();
    int n = b.size();
    for(int i=0;i<m+1;i++){
        for(int j=0;j<n+1;j++){
            if(i == 0 || j == 0){
                t[i][j] = 0;
            }
        }
    }
    for(int i=1;i<m+1;i++){
        for(int j=1;j<n+1;j++){
            if(a[i-1] == b[j-1]){
                t[i][j] = 1 + t[i-1][j-1];
            }
            else{
                t[i][j] = max(t[i-1][j], t[i][j-1]);
            }
        }
    }
    
    int i = m;
    int j = n;
    vector<int> res;
    while(i > 0 && j > 0){
        if(a[i-1] == b[j-1]){
            res.push_back(a[i-1]);
            i--;
            j--;
        }
        else{
            if(t[i][j-1] > t[i-1][j]){
                j--;
            }
            else{
                i--;
            }
        }
    }
    // for (auto i : res){
    //     cout<<i<<" ";
    // }
    reverse(res.begin(), res.end());
    return res;
    // vector<int> v;
    // return v;
    
}

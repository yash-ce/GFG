//https://practice.geeksforgeeks.org/problems/minimum-sum-partition3317/1/#

class Solution
public:
	int minDifference(int arr[], int n)  { 
	    // Your code goes here
	    int range = 0;
	    for(int i=0;i<n;i++){
	        range += arr[i];
	    }
	    
	    bool t[n+1][range+1];
	    
	    for(int i=0;i<n+1;i++){
	        for(int j=0;j<range+1;j++){
	            if(i == 0){
	                t[i][j] = false;
	            }
	            if(j == 0){
	                t[i][j] = true;
	            }
	        }
	    }
	    
	    for(int i=1;i<n+1;i++){
	        for(int j=1;j<range+1;j++){
	            if(arr[i-1] <= j){
	                t[i][j] = t[i-1][j-arr[i-1]] || t[i-1][j];
	            }
	            else{
	                t[i][j] = t[i-1][j];
	            }
	        }
	    } 
	    vector<int> v;
	    for(int i=0;i<=(range)/2;i++){
	        if(t[n][i] == true){
	           // cout<<t[range][i]<<"  "<<i;
	            v.push_back(i);
	        }
	    }
	    int mn = INT_MAX;
	    for(int i=0;i<v.size();i++){
	        mn = min(mn, range-2*v[i]);
	    }
	    return mn;
	    
	} 
};
